{"version":3,"sources":["components/PhoneDetailsPage/PhoneDetailsPage.tsx"],"names":["mapDispatchToProps","loadPhone","loadPhoneStore","PhoneDetailsPage","connect","state","phoneDetails","phoneError","match","useState","mainImage","setMainImage","useMemo","params","phoneId","chooseMainImage","useCallback","event","image","preventDefault","MAIN_URL","loadPhoneByColor","color","tmpArr","id","split","pop","push","newId","join","loadPhoneByCapacity","capacity","splice","parseInt","className","src","alt","name","images","map","key","href","onClick","colorsAvailable","type","style","backgroundColor","capacityAvailable"],"mappings":"yQA+KMA,EAAqB,CACzBC,UAAWC,KAGAC,EAAmBC,aATR,SAACC,GAAD,MAAmB,CACzCC,aAAcD,EAAMC,aACpBC,WAAYF,EAAME,cAQDP,EADaI,EA1J5B,SAAC,GAKE,IAJLE,EAII,EAJJA,aACAL,EAGI,EAHJA,UACAO,EAEI,EAFJA,MACAD,EACI,EADJA,WACI,EAC8BE,mBAAS,IADvC,mBACGC,EADH,KACcC,EADd,KAGJC,mBAAQ,kBAAMX,EAAUO,EAAMK,OAAOC,WAAU,IAE/C,IAAMC,EAAkBC,uBACtB,SAACC,EAA4CC,GAC3CD,EAAME,iBAENR,EAAa,GAAD,OAAIS,KAAJ,OAAeF,MAE7B,CAACR,IAGGW,EAAmBL,uBACvB,SAACM,GACC,GAAIhB,EAAc,CAChB,IAAMiB,EAASjB,EAAakB,GAAGC,MAAM,KAErCF,EAAOG,MACPH,EAAOI,KAAKL,GACZ,IAAMM,EAAQL,EAAOM,KAAK,KAE1B5B,EAAU2B,MAGd,CAACtB,IAGGwB,EAAsBd,uBAC1B,SAACe,GACC,GAAIzB,EAAc,CAChB,IAAMiB,EAASjB,EAAakB,GAAGC,MAAM,KAErCF,EAAOS,OAAO,EAAG,EAAjB,UAAuBC,SAASF,EAAU,IAA1C,OACA,IAAMH,EAAQL,EAAOM,KAAK,KAE1B5B,EAAU2B,MAGd,CAACtB,IAGH,OAAIC,IAAeD,EAEf,oCACE,iDAMJ,yBAAK4B,UAAU,oBACb,yBAAKA,UAAU,gBACb,yBAAKC,IAAI,iBAAiBC,IAAI,YAAYF,UAAU,cACpD,yBACEC,IAAI,oBACJC,IAAI,aACJF,UAAU,eAEZ,0BAAMA,UAAU,sBAAhB,UACA,yBACEC,IAAI,oBACJC,IAAI,aACJF,UAAU,eAEZ,0BAAMA,UAAU,sBAAsB5B,EAAa+B,OAErD,wBAAIH,UAAU,kBAAkB5B,EAAa+B,MAC7C,yBAAKH,UAAU,yBACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,uBACX5B,EAAagC,OAAOC,KAAI,SAAArB,GAAK,OAC5B,wBAAIsB,IAAKtB,EAAOgB,UAAU,sBACxB,uBACEO,KAAK,IACLP,UAAU,qBACVQ,QAAS,SAACzB,GAAD,OAAWF,EAAgBE,EAAOC,KAE3C,yBACEiB,IAAG,UAAKf,KAAL,OAAgBF,GACnBkB,IAAI,kBACJF,UAAU,4BAMpB,yBAAKA,UAAU,sBACb,yBACEC,IAAKzB,GAAS,UAAOU,KAAP,OAAkBd,EAAagC,OAAO,IACpDF,IAAI,gBACJF,UAAU,6BAIhB,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,oBAAb,oBACA,yBAAKA,UAAU,sBACZ5B,EAAaqC,gBAAgBJ,KAAI,SAACjB,GAAD,OAChC,yBACEkB,IAAKlB,EACLY,UAAWZ,IAAUhB,EAAagB,MAC9B,qCACA,iBAEJ,4BACEsB,KAAK,SACLC,MAAO,CAAEC,gBAAiBxB,GAC1BY,UAAU,qBACVQ,QAAS,kBAAMrB,EAAiBC,YAM1C,yBAAKY,UAAU,mBACb,uBAAGA,UAAU,oBAAb,mBACA,yBAAKA,UAAU,2BACZ5B,EAAayC,kBAAkBR,KAAI,SAACR,GAAD,OAClC,4BACEa,KAAK,SACLJ,IAAKT,EACLG,UAAWH,IAAazB,EAAayB,SACjC,2CACA,iBACJW,QAAS,kBAAMZ,EAAoBC,KAElCA","file":"static/js/4.788e5381.chunk.js","sourcesContent":["import React, { FC, useMemo, useState, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {\n  loadPhone as loadPhoneStore,\n} from '../../store/store';\n\nimport './PhoneDetailsPage.css';\nimport { MAIN_URL } from '../../utils/constants';\n\ninterface MatchParams {\n  phoneId: string;\n}\n\ninterface StateProps {\n  phoneDetails: Details | null;\n  phoneError: string;\n}\n\ninterface DispatchProps {\n  loadPhone: (value: string) => void;\n}\n\nconst PhoneDetailsPageTemplate: FC<\n  RouteComponentProps<MatchParams> & StateProps & DispatchProps\n> = ({\n  phoneDetails,\n  loadPhone,\n  match,\n  phoneError,\n}) => {\n  const [mainImage, setMainImage] = useState('');\n\n  useMemo(() => loadPhone(match.params.phoneId), []);\n\n  const chooseMainImage = useCallback(\n    (event: React.MouseEvent<HTMLAnchorElement>, image: string) => {\n      event.preventDefault();\n\n      setMainImage(`${MAIN_URL}${image}`);\n    },\n    [mainImage],\n  );\n\n  const loadPhoneByColor = useCallback(\n    (color: string) => {\n      if (phoneDetails) {\n        const tmpArr = phoneDetails.id.split('-');\n\n        tmpArr.pop();\n        tmpArr.push(color);\n        const newId = tmpArr.join('-');\n\n        loadPhone(newId);\n      }\n    },\n    [phoneDetails],\n  );\n\n  const loadPhoneByCapacity = useCallback(\n    (capacity: string) => {\n      if (phoneDetails) {\n        const tmpArr = phoneDetails.id.split('-');\n\n        tmpArr.splice(3, 1, `${parseInt(capacity, 10)}gb`);\n        const newId = tmpArr.join('-');\n\n        loadPhone(newId);\n      }\n    },\n    [phoneDetails],\n  );\n\n  if (phoneError || !phoneDetails) {\n    return (\n      <>\n        <div>Phone not found</div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"phone__container\">\n      <div className=\"phones__path\">\n        <img src=\"./img/Home.png\" alt=\"home_icon\" className=\"home-icon\" />\n        <img\n          src=\"./img/Chevron.png\"\n          alt=\"arrow_icon\"\n          className=\"arrow-icon\"\n        />\n        <span className=\"phones__path-title\">Phones</span>\n        <img\n          src=\"./img/Chevron.png\"\n          alt=\"arrow_icon\"\n          className=\"arrow-icon\"\n        />\n        <span className=\"phones__path-title\">{phoneDetails.name}</span>\n      </div>\n      <h2 className=\"phones__heding\">{phoneDetails.name}</h2>\n      <div className=\"phone__container-main\">\n        <div className=\"phone__images\">\n          <ul className=\"phone__images--list\">\n            {phoneDetails.images.map(image => (\n              <li key={image} className=\"phone__images-item\">\n                <a\n                  href=\"/\"\n                  className=\"phone__images-link\"\n                  onClick={(event) => chooseMainImage(event, image)}\n                >\n                  <img\n                    src={`${MAIN_URL}${image}`}\n                    alt=\"phone_small_img\"\n                    className=\"phone__images-img\"\n                  />\n                </a>\n              </li>\n            ))}\n          </ul>\n          <div className=\"phone__images--big\">\n            <img\n              src={mainImage || `${MAIN_URL}${phoneDetails.images[0]}`}\n              alt=\"phone_big_img\"\n              className=\"phone__images--big-img\"\n            />\n          </div>\n        </div>\n        <div className=\"phone__main-info\">\n          <div className=\"phone__colors\">\n            <p className=\"main-info__title\">Available colors</p>\n            <div className=\"colors__color-list\">\n              {phoneDetails.colorsAvailable.map((color) => (\n                <div\n                  key={color}\n                  className={color === phoneDetails.color\n                    ? 'colors__color-active colors__color'\n                    : 'colors__color'}\n                >\n                  <button\n                    type=\"button\"\n                    style={{ backgroundColor: color }}\n                    className=\"colors__color-item\"\n                    onClick={() => loadPhoneByColor(color)}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className=\"phone__capacity\">\n            <p className=\"main-info__title\">Select capacity</p>\n            <div className=\"capacity__capacity-list\">\n              {phoneDetails.capacityAvailable.map((capacity) => (\n                <button\n                  type=\"button\"\n                  key={capacity}\n                  className={capacity === phoneDetails.capacity\n                    ? 'capacity__capacity-active capacity__item'\n                    : 'capacity__item'}\n                  onClick={() => loadPhoneByCapacity(capacity)}\n                >\n                  {capacity}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  phoneDetails: state.phoneDetails,\n  phoneError: state.phoneError,\n});\n\nconst mapDispatchToProps = {\n  loadPhone: loadPhoneStore,\n};\n\nexport const PhoneDetailsPage = connect(\n  mapStateToProps, mapDispatchToProps,\n)(PhoneDetailsPageTemplate);\n"],"sourceRoot":""}